// <auto-generated />
using System;
using AppStoreManager.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppStoreManager.Migrations
{
    [DbContext(typeof(AppManagerDbContext))]
    [Migration("20240708081705_DbCreation")]
    partial class DbCreation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("AppCataloguePermission", b =>
                {
                    b.Property<int>("AppsAppCatalogueId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PermissionsPermissionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AppsAppCatalogueId", "PermissionsPermissionId");

                    b.HasIndex("PermissionsPermissionId");

                    b.ToTable("AppCataloguePermission");
                });

            modelBuilder.Entity("AppStoreManager.Entities.AppCatalogue", b =>
                {
                    b.Property<int>("AppCatalogueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AppCatalogueId");

                    b.HasIndex("CategoryId");

                    b.ToTable("AppCatalogues");
                });

            modelBuilder.Entity("AppStoreManager.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("AppStoreManager.Entities.PayMethod", b =>
                {
                    b.Property<int>("PayMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("StoreUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PayMethodId");

                    b.HasIndex("StoreUserId");

                    b.ToTable("PayMethods");
                });

            modelBuilder.Entity("AppStoreManager.Entities.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PermissionId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("AppStoreManager.Entities.Purchase", b =>
                {
                    b.Property<int>("AppCatalogueId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StoreUserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("AppCatalogueId", "StoreUserId");

                    b.HasIndex("StoreUserId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("AppStoreManager.Entities.StoreUser", b =>
                {
                    b.Property<int>("StoreUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("StoreUserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AppCataloguePermission", b =>
                {
                    b.HasOne("AppStoreManager.Entities.AppCatalogue", null)
                        .WithMany()
                        .HasForeignKey("AppsAppCatalogueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppStoreManager.Entities.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsPermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppStoreManager.Entities.AppCatalogue", b =>
                {
                    b.HasOne("AppStoreManager.Entities.Category", "Category")
                        .WithMany("Apps")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("AppStoreManager.Entities.PayMethod", b =>
                {
                    b.HasOne("AppStoreManager.Entities.StoreUser", "StoreUser")
                        .WithMany("PayMethods")
                        .HasForeignKey("StoreUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreUser");
                });

            modelBuilder.Entity("AppStoreManager.Entities.Purchase", b =>
                {
                    b.HasOne("AppStoreManager.Entities.AppCatalogue", "App")
                        .WithMany("Purchases")
                        .HasForeignKey("AppCatalogueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppStoreManager.Entities.StoreUser", "User")
                        .WithMany("Purchases")
                        .HasForeignKey("StoreUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("App");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AppStoreManager.Entities.AppCatalogue", b =>
                {
                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("AppStoreManager.Entities.Category", b =>
                {
                    b.Navigation("Apps");
                });

            modelBuilder.Entity("AppStoreManager.Entities.StoreUser", b =>
                {
                    b.Navigation("PayMethods");

                    b.Navigation("Purchases");
                });
#pragma warning restore 612, 618
        }
    }
}
